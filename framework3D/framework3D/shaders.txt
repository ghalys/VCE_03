\shaders
skybox skybox.vs skybox.fs
phong_texture phong.vs phong_texture.fs
quad_sprites quad_sprites.vs quad_sprites.fs
point_sprites point_sprites.vs point_sprites.fs
fx @SCREEN fx.fs

\phong.vs

precision highp float;
attribute vec3 a_vertex;
attribute vec3 a_normal;
attribute vec2 a_coord;
varying vec3 v_pos;
varying vec3 v_wPos;
varying vec3 v_wNormal;
varying vec2 v_coord;
uniform mat4 u_model;
uniform mat4 u_mvp;
uniform float u_time;


void main() {
	v_coord = a_coord;
	vec3 vertex = a_vertex;	
	
	v_pos = vertex;
	v_wPos = (u_model * vec4(vertex,1.0)).xyz;
	v_wNormal = (u_model * vec4(a_normal,0.0)).xyz;
	
	gl_Position = u_mvp * vec4(vertex,1.0);
	gl_PointSize = 2.0;
}


\phong_texture.fs

precision highp float;
varying vec3 v_pos;
varying vec3 v_wPos;
varying vec3 v_wNormal;
varying vec2 v_coord;

uniform sampler2D u_color_texture;
uniform mat3 u_texture_matrix;

void main() {
	vec3 N = normalize(v_wNormal);
	vec2 uv = (u_texture_matrix * vec3(v_coord,1.0)).xy;
	vec4 color = texture2D( u_color_texture, uv );
	vec3 L = normalize(vec3(1.0,2.0,1.0));
	color *= 0.8 + 0.2 * max(0.0, dot(N,L));
	gl_FragColor = color;
}

\fx.fs

precision highp float;
uniform sampler2D u_texture;
uniform sampler2D u_lowtexture;
varying vec2 v_coord;
void main() {
	vec3 color = texture2D(u_texture, v_coord).xyz;
	color += texture2D(u_lowtexture, v_coord).xyz;
	gl_FragColor = vec4(color,1.0);
}

\skybox.vs

precision highp float;
attribute vec3 a_vertex;
attribute vec3 a_normal;
attribute vec2 a_coord;
varying vec3 v_pos;
varying vec3 v_wPos;
varying vec3 v_wNormal;
varying vec2 v_coord;
uniform mat4 u_model;
uniform mat4 u_mvp;

void main() {
	v_coord = a_coord;
	vec3 vertex = a_vertex;	
	v_pos = vertex;
	v_wPos = (u_model * vec4(vertex,1.0)).xyz;
	v_wNormal = (u_model * vec4(a_normal,0.0)).xyz;
	gl_Position = u_mvp * vec4(vertex,1.0);
}

\skybox.fs

precision highp float;
varying vec3 v_pos;
varying vec3 v_wPos;
varying vec3 v_wNormal;
varying vec2 v_coord;

uniform vec4 u_color;
uniform samplerCube u_color_texture;
uniform vec3 u_camera_position;

void main() {
  vec3 L = normalize(vec3(1.,1.,-1.));
  vec3 N = normalize( v_wNormal );
    vec3 E = normalize( v_wPos - u_camera_position );
  vec4 color = u_color;
  color.xyz = textureCube( u_color_texture, -E * vec3(1.0,-1.0,1.0) ).xyz;
  gl_FragColor = color;
}


\quad_sprites.vs

precision highp float;
attribute vec3 a_vertex;
attribute vec4 a_extra4;
attribute vec2 a_extra2;
varying vec3 v_pos;
varying vec2 v_uv;
varying vec4 v_color;
uniform mat4 u_model;
uniform mat4 u_viewprojection;
uniform vec4 u_viewport;
uniform vec2 u_size;
uniform vec3 u_top;
uniform vec3 u_right;
uniform vec4 u_color;
uniform vec3 u_colors[8];
uniform vec2 u_atlas;
uniform vec2 u_itexsize;

void main() {
	vec3 vertex = a_vertex + a_extra4.w * u_size.y * u_top * a_extra2.y + a_extra4.w * u_size.x * u_right * a_extra2.x;
	vec2 uv = a_extra2;
	if( a_extra4.y != 0.0) //flip X
		uv.x *= -1.0;
	uv.x *= 1.0 - u_itexsize.x;
	uv.y *= -1.0;
	uv = uv * 0.5 + vec2(0.5);

	vec2 i_atlas = vec2(1.0) / u_atlas; 
	float frame = a_extra4.x;
	float frame_x = mod( frame, u_atlas.x );
	float frame_y = floor( frame * i_atlas.x );
	uv.x = (uv.x + frame_x) * i_atlas.x;
	uv.y += frame_y;
	uv.y = 1.0 - uv.y * i_atlas.y;
	v_uv = uv;
	v_pos = (u_model * vec4(vertex,1.0)).xyz;
	int color_index = int(a_extra4.z);
	v_color = u_color * vec4( u_colors[ color_index ], 1.0 );
	gl_Position = u_viewprojection * vec4(v_pos,1.0);
	gl_Position.x = floor(gl_Position.x * u_viewport.z * 1.0) / (u_viewport.z * 1.0);
	gl_Position.y = floor(gl_Position.y * u_viewport.w * 1.0) / (u_viewport.w * 1.0);
}

\quad_sprites.fs

precision highp float;
precision mediump int;

varying vec3 v_pos;
varying vec2 v_uv;
varying vec4 v_color;

uniform sampler2D u_texture;

void main() {
	vec4 color = texture2D( u_texture, v_uv );
	if(color.a < 0.1)
		discard;
	color *= v_color;
	gl_FragColor = color;
}

\point_sprites.vs

precision highp float;
attribute vec3 a_vertex;
attribute vec4 a_extra4;
varying vec3 v_pos;
varying vec3 v_wPos;
varying vec4 v_extra4;
uniform mat4 u_model;
uniform mat4 u_mvp;
uniform vec4 u_viewport;
uniform float u_camera_perspective;
uniform float u_pointSize;

float computePointSize( float radius, float w )
{
	if(radius < 0.0)
		return -radius;
	return u_viewport.w * u_camera_perspective * radius / w;
}

void main() {
	vec3 vertex = a_vertex;	
	
	v_pos = vertex;
	v_wPos = (u_model * vec4(vertex,1.0)).xyz;
	v_extra4 = a_extra4;
	gl_Position = u_mvp * vec4(vertex,1.0);
	gl_Position.x = floor(gl_Position.x * u_viewport.z) / u_viewport.z;
	gl_Position.y = floor(gl_Position.y * u_viewport.w) / u_viewport.w;
	gl_PointSize = computePointSize( u_pointSize, gl_Position.w );
}

\point_sprites.fs

precision highp float;
varying vec3 v_pos;
varying vec3 v_wPos;
varying vec4 v_extra4; //id,flip
uniform float u_atlas;

uniform sampler2D u_texture;

void main() {
	float i_atlas = 1.0 / u_atlas;
	float frame = v_extra4.x;
	float x = frame * i_atlas;
	float y = floor(x);
	x = (x - y);
	y = y / u_atlas;
	if( v_extra4.y > 0.0 ) //must flip in x
		x -= gl_PointCoord.x * i_atlas - i_atlas;
	else
		x += gl_PointCoord.x * i_atlas;

	vec2 uv = vec2( x, 1.0 - (y + gl_PointCoord.y / u_atlas) );
	vec4 color = texture2D( u_texture, uv );
	if(color.a < 0.1)
		discard;
	gl_FragColor = color;
}





